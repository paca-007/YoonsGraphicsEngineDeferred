#include "Deer.h"

#include <DirectXColors.h>
#include <d3dcompiler.h>

Deer::Deer(ID3D11Device* pDevice, ID3D11DeviceContext* pDeviceContext, ID3D11RasterizerState* pRS)
	: m_d3dDevice(pDevice)
	, m_d3dImmediateContext(pDeviceContext)
	, m_Renderstate(pRS)
	, m_VertexBuffer(nullptr)
	, m_IndexBuffer(nullptr)
	, m_FX(nullptr)
	, m_Technique(nullptr)
	, m_fxWorldViewProjection(nullptr)
	, m_InputLayout(nullptr)
	, m_World()
	, m_View()
	, m_Projection()
{
	//메쉬가 무슨 쉐이더를 들고 잇을지 초기화 시켜주면 좋것다.
	//근데 이렇게 하면 다 들고 잇어야 됨?
}

Deer::~Deer()
{
	//릴리즈(삭제)는 할당, 생성의 반대 순서로 해야 함.
	ReleaseCOM(m_FX);
	ReleaseCOM(m_InputLayout);

	ReleaseCOM(m_IndexBuffer);
	ReleaseCOM(m_VertexBuffer);
}

void Deer::Initialize()
{
	BuildGeometryBuffers();
	BuildFX();
	BuildVertexLayout();
}

void Deer::Update(const XMMATRIX& world, const XMMATRIX& view, const XMMATRIX& proj)
{
	XMStoreFloat4x4(&m_World, world);
	XMStoreFloat4x4(&m_View, view);
	XMStoreFloat4x4(&m_Projection, proj);
}

void Deer::Render()
{
	//입력 배치 객체 셋팅
	m_d3dImmediateContext->IASetInputLayout(m_InputLayout);
	m_d3dImmediateContext->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);

	//렌더 스테이트
	m_d3dImmediateContext->RSSetState(m_Renderstate);

	//버텍스버퍼, 인덱스버퍼 셋팅
	UINT stride = sizeof(Vertex);
	UINT offset = 0;

	m_d3dImmediateContext->IASetVertexBuffers(0, 1, &m_VertexBuffer, &stride, &offset);
	m_d3dImmediateContext->IASetIndexBuffer(m_IndexBuffer, DXGI_FORMAT_R32_UINT, 0);

	//TM 셋팅 (world, view, projection)
	XMMATRIX world = XMLoadFloat4x4(&m_World);
	XMMATRIX view = XMLoadFloat4x4(&m_View);
	XMMATRIX proj = XMLoadFloat4x4(&m_Projection);
	XMMATRIX worldViewProjection = world * view * proj;

	//상수 버퍼 변수를 통해 월드뷰프로젝선 행렬 셋팅
	m_fxWorldViewProjection->SetMatrix(reinterpret_cast<float*>(&worldViewProjection));

	//테크닉
	D3DX11_TECHNIQUE_DESC techDesc;
	m_Technique->GetDesc(&techDesc);

	//렌더패스
	for (UINT p = 0; p < techDesc.Passes; ++p)
	{
		m_Technique->GetPassByIndex(p)->Apply(0, m_d3dImmediateContext);
		m_d3dImmediateContext->DrawIndexed(4525, 0, 0);
	}

}

void Deer::BuildGeometryBuffers()
{
	Vertex vertices[] =
	{
		{XMFLOAT3(2.835558, 4.626502, -0.000098) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.920484, 4.675817, -0.402527)   , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(1.957343, 4.767008, 0.536628) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(1.252752, 4.459653, -0.000073)   , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.925976, 11.521207, -0.897825)  , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.308596, 4.753192, 0.954156)  , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.117918, 5.382209, 0.977438), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.783116, 5.349477, 1.453154), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.143332, 6.176612, 1.179085), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.936120, 6.240390, 1.482584), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.005504, 7.011833, 1.245368), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.182805, 6.836456, 1.079824), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.085924, 6.953584, 1.060637), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.386350, 6.161731, 1.250965), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.909888, 6.811375, 0.456658) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(5.031540, 6.060549, 0.647851) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.910254, 6.811375, -0.467091)  , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(5.094251, 6.751640, -0.326654)  , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(5.056262, 6.604860, -0.010445)   , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.702106, 12.191947, 0.702963)  , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(5.094252, 6.753553, 0.325924)   , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.999096, 6.020587, -0.021329)    , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(5.031723, 6.060759, -0.689862)    , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.678488, 5.246584, 0.827735) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.949862, 5.362865, 1.377927), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.352290, 5.091406, -0.021215)   , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.549273, 7.435501, 0.368821) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.838123, 7.703772, 0.714249)  , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.582108, 7.583772, -0.005081)   , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.916735, 7.248010, 0.271176)  , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.572464, 12.584109, 2.082659), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.991126, 7.827283, 0.000224)  , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.895214, 7.672735, 0.917406) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.182622, 7.384273, 0.833010)   , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.169286, 7.716312, 0.524986) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(1.378481, 6.780119, 1.058481), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(1.354509, 7.307106, 0.841421) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(1.371093, 6.124956, 1.161514), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(1.305674, 5.387100, 1.061066), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(0.597047, 6.099874, 1.285349), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(0.391234, 5.245946, 1.050727) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(1.259537, 4.720033, 0.622099), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(0.562079, 4.716417, 0.532970) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(0.626057, 4.502990, -0.000097)     , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(1.965098, 4.777427, -0.536491)   , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(1.259536, 4.719814, -0.621856)    , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(0.562079, 4.715990, -0.532613)   , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.171778, 4.558471, 0.424007)  , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(0.078556, 4.567824, 0.878607)    , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.089233, 4.521906, -0.000096)      , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.270173, 6.178953, 1.648662)  , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.263509, 5.333531, 1.622044)  , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.467555, 6.332436, 1.462107) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.151269, 5.301219, 1.500044) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.507244, 5.559289, 0.646134)  , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.838990, 4.900083, 0.918701)  , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.221154, 6.925953, 1.382024)  , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.130188, 7.196346, 1.165183) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.657866, 7.874049, 0.675659)  , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.173475, 6.976335, 0.894449), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.752521, 6.381752, 0.478109), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.269989, 4.754258, 1.316500), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.954112, 4.754039, 1.319191), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(0.585868, 6.803716, 1.199887), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(0.537033, 7.444644, 0.911364), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.260619, 7.633200, 1.007184), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.892149, 4.724068, 1.415541), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.506112, 4.441125, 0.962024), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.672142, 4.778912, 1.371142), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.265240, 4.720880, 0.904900), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.088631, 4.390962, 0.922358), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.754678, 4.329525, 0.586100), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.813251, 4.032339, 0.698399), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.762089, 11.618125, -0.363804), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.794827, 4.561231, 0.384664), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.007679, 0.154658, -0.764901), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.917960, 4.675599, 0.383589), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.232971, 0.105761, 1.124201), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.022446, 4.254482, 1.354217), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.785214, 4.125876, 1.009030), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.571574, 3.602322, 1.188063), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.489741, 10.760842, -0.447038), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.664373, 4.272734, 1.272407), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.846911, 4.616083, -0.384746), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.117376, 5.380515, -0.973415), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.308770, 4.752345, -0.954124), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.780233, 5.339058, -1.521895), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.931795, 6.241874, -1.517363), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.138467, 6.179162, -1.172590), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.178298, 6.840072, -1.067401), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.002079, 7.010987, -1.242429), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.893405, 7.674438, -0.915978), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.178840, 7.392560, -0.819513), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.397487, 7.891689, -0.414386), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.860286, 7.656369, -0.742566), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.834658, 7.843440, -0.517960), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.439834, 7.942927, 0.000120), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.791404, 7.931653, 0.000548), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.397304, 7.891689, 0.414731), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.835200, 7.842803, 0.521432), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.549815, 7.435710, -0.368800), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.086648, 6.953802, -1.069340), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.168928, 7.717378, -0.512030), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(1.354866, 7.309657, -0.832560), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(1.340090, 7.631287, -0.493813), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(1.351085, 7.774352, 0.000662), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(0.503690, 7.900196, -0.480879), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(0.509454, 8.033690, 0.000872), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.183163, 7.843859, 0.001850), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(0.539373, 7.450809, -0.894634), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(1.378838, 6.782887, -1.057052), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.361302, 6.257392, -1.251695) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.678845, 5.247440, -0.869528) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.949862, 5.363293, -1.390193) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.265064, 4.721308, -0.925567) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.101424, 4.390962, -0.926318) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.639353, 4.679554, -1.363117) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.827761, 0.312742, 0.891339) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(1.305848, 5.386034, -1.057593) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(1.371634, 6.125384, -1.151360) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(0.392858, 5.243825, -1.049619) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.267650, 6.179589, -1.648637) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(0.011511, 6.146212, -1.498717) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(0.048094, 5.296966, -1.339321) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.260803, 5.332683, -1.621477) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(0.600827, 6.099237, -1.283596) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(0.033454, 6.867195, -1.278751), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.003219, 11.369212, 0.865460) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.150729, 5.301009, -1.500550) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.467198, 6.332855, -1.463802) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.129822, 7.196346, -1.158145) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.218815, 6.926799, -1.379519) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(0.078555, 4.567396, -0.871569), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.171778, 4.558471, -0.423004), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.426068, 3.846334, -0.506099), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.259545, 3.853354, -0.760449), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(0.033492, 4.669652, -1.186597), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.400471, 3.884173, -1.030004), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.269458, 4.753829, -1.317113), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.816608, 11.578315, -0.893640), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.506295, 4.440705, -0.962638), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.990595, 4.290360, -1.384148), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.579888, 12.999051, -2.423539), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(2.763352, 4.136084, -1.007820), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.404333, 3.499194, -0.970726), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.754503, 3.099342, -0.952945), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.048799, 3.701783, -0.757761), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.576261, 3.561696, -0.761211), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.000138, 3.152483, -0.756897), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.419508, 3.245376, -0.791061), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.152890, 3.956111, -0.666063), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.788379, 3.990464, -0.688997), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.751422, 0.156390, 0.744898), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.502073, 3.619624, -1.207421), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.452599, 10.880772, -0.252488), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.724400, 4.278935, -0.580148), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.404552, 12.228222, 1.984016), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.086926, 11.386923, -1.642687), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-5.143263, 8.921482, 0.272713), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.474484, 10.299990, 0.122988), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.142491, 10.839911, 0.640568), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.406863, 11.640738, 1.114320), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-5.331043, 8.933657, 0.169830), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-5.310144, 8.933887, -0.225190), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.286335, 11.594371, 2.188861), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.841225, 11.895039, -0.606208), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.766075, 0.168158, -0.733845), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.105245, 12.637872, 3.122185), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.181159, 11.104545, 0.360066), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.169276, 11.757556, 1.004678), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-5.128193, 8.928504, -0.286339), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.754930, 9.171149, -0.330191), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.044247, 11.461350, 1.780815), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.923553, 9.003688, -0.293328), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.442014, 12.702620, -2.269336), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.957116, 10.039787, -0.360169), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.627612, 12.295962, -2.188530), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-5.108037, 9.058646, -0.000898), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.286336, 11.594369, -2.198955), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.105256, 12.637846, -3.132268), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.808215, 9.151578, 0.015840), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.025333, 12.568790, -1.153440), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.114975, 11.060658, 1.134227), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-5.373017, 9.369347, -0.213887), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.299483, 11.635866, 1.088715), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-5.454561, 9.265791, -0.092338), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.228468, 13.950837, 3.304196), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-5.179954, 9.184488, -0.355526), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.356790, 11.804595, -2.353964), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.347387, 10.499585, -0.338978), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.205895, 10.703399, -0.508944), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.114975, 11.060656, -1.144321), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-5.435533, 9.369853, 0.121153), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-5.280478, 9.250455, 0.290361), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.664113, 10.539841, 0.388040), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.701138, 10.653679, 0.574216) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.944350, 11.531237, 1.787886) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.242908, 11.939024, -1.217220) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.299466, 11.635840, -1.098806) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.223617, 10.314444, 0.094107) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-5.091341, 9.582746, 0.036666) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.151465, 13.522404, -3.469140) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.181094, 11.881365, 1.126449) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.417959, 12.111240, 2.113118) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.768962, 11.971827, 3.005240) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.867214, 11.997311, 3.037212) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.443175, 11.378275, -0.875533) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.903398, 11.257550, 0.853771) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.496912, 9.904089, -0.278525) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.350380, 9.555475, -0.440145) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-5.003446, 9.542183, -0.199674) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.409740, 13.546165, -2.425550) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.520274, 11.209344, 0.991407) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-5.228329, 9.413104, 0.256338) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.644183, 11.049932, 0.911272) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.224466, 11.912395, -1.747423) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.775512, 9.208904, 0.324635) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.409739, 13.546165, 2.415447) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.869010, 11.566248, 1.624913) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.044244, 11.461349, -1.790903) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.925979, 11.521209, 0.887721) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.436774, 11.803295, 2.076259) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.511217, 12.062265, -3.083812) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.748756, 0.150211, 1.026934) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.627608, 12.295952, 2.178431) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.707055, 11.578353, 1.223948) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.215862, 11.725652, -1.872894) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.479806, 11.060414, 0.446474) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.501850, 13.454239, -3.432665) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.724272, 12.170214, -0.778795) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.134641, 11.663784, -1.440443) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.991843, 11.777293, 2.262637) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.470436, 10.582648, 0.163100), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-5.071252, 8.799917, 0.150371), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.258638, 11.025156, -0.496831), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.865661, 11.288764, 1.203923), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.436858, 11.803279, -2.086315), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.631816, 8.979491, 0.274963), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.781191, 11.459165, 0.936004), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.870863, 9.051772, 0.284667), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.562346, 8.890871, 0.157429), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.462910, 10.869881, 0.237920), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.976174, 11.115108, 1.129985), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.875485, 11.376984, -0.690775), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.327069, 10.275965, 0.050564), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.913587, 11.013314, 0.601729), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.474662, 0.087522, -0.723015), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.953884, 10.619736, -0.350714), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.799545, 11.472829, -0.508933), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.224465, 11.912394, 1.737323), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.699028, 11.658684, 0.859572), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.285342, 11.610687, 1.554692), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.859140, 10.665433, 0.641188), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.593798, 12.238100, 0.772277), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.664834, 8.921904, -0.223097), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.801057, 11.253452, -0.653665), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.625953, 12.120242, -0.734931), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.771906, 0.981215, -0.756676), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.355674, 11.711635, -1.160355), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-5.284782, 8.889556, -0.109497), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.300323, 11.873552, 2.240323), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.870410, 10.504198, 0.142304), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.986752, 8.845552, -0.261207), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.869013, 11.566249, -1.635015), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.889235, 0.249068, 0.887643), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-5.244917, 8.914775, 0.185671), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.664114, 10.539838, -0.398139), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.532212, 12.401490, 3.287011), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.461331, 10.039787, 0.519277), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.643544, 11.452739, -1.326747), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.336652, 11.910817, 1.205820), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-5.114062, 8.816599, -0.199488), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.080006, 11.692959, 1.776347), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.304643, 11.560459, 1.784068), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.511218, 12.062267, 3.073710), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.347148, 10.499338, 0.330383), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.172263, 12.142542, -2.856179), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.169010, 10.227924, -0.217908), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.145802, 10.773971, -1.154393), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.065401, 10.996007, 1.205580), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.327598, 11.053907, -1.017320), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.689278, 10.642172, -0.698389), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.356786, 11.804602, 2.343870), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.913443, 12.938685, -1.967786), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.357163, 10.081672, -0.480773), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.502263, 12.957935, -2.540886), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.012368, 11.083786, -1.079663), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.140871, 11.373642, -1.394231), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.898702, 10.864650, -1.201794), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.998537, 11.757886, 2.832364), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.017269, 11.150078, -1.725938), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.711217, 11.934117, -1.006951), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.964506, 11.407281, -0.532365), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.865088, 13.016201, 3.285575), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.189955, 10.667482, -1.548350), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.983228, 10.673424, -1.331366), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.870196, 11.224963, 0.633468), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.153505, 10.584847, -0.308334), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.394874, 10.509791, -0.595182), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.867218, 11.997302, -3.047308), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.202719, 10.142042, -0.352624), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.689279, 10.642175, 0.688285), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.137583, 11.843027, 2.548232), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.824373, 11.934950, 1.249537), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.726372, 11.983150, 3.156035), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.232054, 11.093135, -0.976191), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.913438, 12.938680, 1.957686), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.314371, 10.645376, -0.714535), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.157702, 10.523938, -0.606328), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.473926, 10.582250, -0.170381), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.427459, 11.769040, 1.308484), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.437391, 10.560291, -0.821319), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.540463, 11.967232, -2.031188), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.532216, 12.401485, -3.297112), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.795099, 11.145235, 0.889477) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.283807, 11.784903, -1.318899) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.023483, 11.443821, -1.783728) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.097827, 11.093328, -1.463260) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.169275, 11.757552, -1.014777) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.157840, 10.248116, 0.232919) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.290033, 11.507527, -1.658312) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.699041, 11.658676, -0.869669) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.098267, 11.149777, -1.765372) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.883246, 11.646889, 1.272065) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.931345, 10.271712, -0.068100) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.428764, 11.636144, -2.125888) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.992294, 10.635119, -0.782954) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.290652, 10.274336, -0.978141) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.140832, 10.171242, -0.811860) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.311530, 10.630596, -1.449886) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.505980, 12.985497, -2.386276) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.442010, 12.702616, 2.259236) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.258096, 7.636597, -1.003596) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.651454, 11.220423, 0.968187) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.424762, 10.408655, -0.962119) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.579885, 12.999055, 2.413439) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.086925, 11.386923, 1.632583) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.964052, 11.715513, 1.633544) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.106131, 10.047348, 0.675629) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.574762, 10.081258, -0.703983) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.864485, 10.258533, -0.582190) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.720127, 10.521067, -0.327193) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.303344, 0.063308, -0.808360) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.894582, 11.776378, -2.756388) , XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.357739, 0.132510, -0.887706), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.697779, 10.502361, -0.000096), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.191679, 10.166444, -0.317264), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.775448, 12.061786, 1.100810), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.013706, 10.137790, 0.183124), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.445917, 10.099829, 0.167131), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.989062, 10.365649, 0.064622), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.258699, 11.025053, 0.486712), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.110845, 10.206668, 0.491471), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.864484, 10.258533, 0.582111), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.720127, 10.520858, 0.327115), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.942340, 10.186041, 0.083113), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.610334, 10.008613, -0.105531), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.073677, 11.659199, 2.369290), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.678214, 10.672935, -0.297598), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.808507, 0.292428, -0.898626), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.601763, 12.006270, 0.864214), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.945947, 10.059988, 0.375181), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.386588, 10.699361, 0.551648), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.477542, 12.502548, 2.366139), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.520276, 11.209350, -1.001511), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.871916, 12.803246, 3.275067), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.935573, 11.901539, -2.779654), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.386589, 10.699363, -0.561747), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.991127, 11.635779, 1.844521), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.362284, 0.106903, 0.882134), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.254436, 10.452408, -0.337428), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.920667, 10.198590, 0.000017), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.971136, 10.126735, -0.468922), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.766223, 9.718586, -0.402525), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.181169, 11.104538, -0.370164), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.524370, 9.376547, -0.405974), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.283308, 9.377368, -0.008745), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.279268, 8.842765, -0.507182), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.039079, 8.299201, -0.724451), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.258043, 8.904202, -0.566129), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.971135, 10.126735, 0.468843), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.766223, 9.718586, 0.402454), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.649977, 9.802344, -0.000096), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.524370, 9.376547, 0.405572), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.098010, 9.476890, -0.593080), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.309045, 9.873981, -0.669704), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.517197, 9.227954, -0.620772), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.593795, 12.238102, -0.782373), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.677782, 9.754376, -0.697294), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.097507, 11.867750, 2.368015), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.594694, 10.366527, -0.676280), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.497556, 10.543389, -0.517312), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.865086, 13.016214, -3.295687), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.991129, 11.635778, -1.854621), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.986392, 10.379156, -0.748187), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.489821, 11.703415, -1.274537), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.280955, 10.459957, 0.256755), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.998546, 11.757883, -2.842453), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.314903, 10.645741, 0.711092), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.162003, 10.508067, 0.578362), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.497556, 10.543389, 0.517128), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.384092, 11.704645, 2.041848), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.883237, 11.646882, -1.282152), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.871919, 12.803245, -3.285171), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.816583, 11.578433, 0.883514), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.614222, 11.763672, -1.132316), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.215860, 11.725654, 1.862792), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.108019, 10.756624, 0.255798), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.201385, 10.088408, -0.582690), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.758730, 13.340519, -3.441484), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.758710, 13.340543, 3.431381), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.888692, 1.765628, 0.681808), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.952525, 1.108272, 0.708928), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.092642, 1.021718, 0.882713), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.989612, 1.772641, 0.828812), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.936013, 12.761266, 3.346665), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.315891, 10.361845, -0.035657), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.643529, 11.452730, 1.316622), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.505971, 12.985511, 2.376182), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.327887, 11.769217, 1.007563), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.995664, 10.051538, -0.684772), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.626684, 11.288572, -0.358742), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.239304, 10.469732, -0.837101), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.638665, 8.932470, 0.448688), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.207941, 8.918016, 0.569291), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.098010, 9.476890, 0.592888), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.309044, 9.873981, 0.669625), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.507367, 9.241596, 0.625030), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.819550, 12.035028, 3.171623), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.781196, 11.459167, -0.946108), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.137585, 11.843024, -2.558329), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.908451, 11.427130, 0.425165), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.547586, 11.415366, 0.759905), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.173516, 10.125888, 0.781819), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.430991, 12.316877, -0.619923), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.917038, 13.045714, -3.426157), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.895139, 12.807489, -1.914163), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.234612, 10.464731, 0.825475), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.163970, 10.673486, 1.065600), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.234796, 10.294244, -0.079095), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.108020, 10.756623, -0.265900), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.426851, 10.410835, 0.791937), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.593555, 11.953802, 2.202660), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.795104, 11.145246, -0.899588), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.278014, 9.835631, -0.420005), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.917038, 13.045715, 3.416048), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.029595, 9.771078, -0.638860), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.559344, 13.425330, -3.546728), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.785903, 11.032234, 0.666048), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.097509, 11.867746, -2.378108), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.416582, 10.592538, 0.822627), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.172256, 12.142569, 2.846105), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.206111, 11.163971, 1.032664), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.559011, 10.030227, -0.491444), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.753441, 11.987494, -1.270104), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.013211, 11.048705, 1.047230), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.992295, 10.635123, 0.772858), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.594694, 10.366527, 0.676201), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.649476, 10.055098, 0.683424), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.457008, 10.170311, 0.787102), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.651454, 11.220426, -0.978291), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.197905, 11.721855, -1.110833), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.684822, 10.402271, 0.596688), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.936017, 12.761251, -3.356757), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.291361, 13.894384, 3.407577), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.467614, 0.079144, -1.042802), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.785904, 11.032237, -0.676154), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.995797, 9.933801, 0.661769), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.756710, 9.980053, 0.500204), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.813908, 10.414072, 0.503285), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.003233, 11.369230, -0.875570), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.269250, 10.297823, 1.027207), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.987313, 10.367781, 0.744207), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.064510, 10.352274, 1.005850), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.964502, 11.407284, 0.522260), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.427668, 10.368247, 0.926692), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.707060, 11.578355, -1.234054), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.698469, 10.582010, 0.190697), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.902770, 10.934641, 1.260512), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.908457, 11.427120, -0.435265), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.980352, 10.760242, 1.418929), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.200048, 10.606886, 1.485995), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.844821, 9.761529, 0.694187), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.080004, 11.692958, -1.786449), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.262465, 9.593725, 0.477542), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.897355, 9.173083, 0.579133), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.922073, 9.564505, 0.207370), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.428774, 11.636143, 2.115787), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.540459, 11.967226, 2.021083), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.976176, 11.115108, -1.140082), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.430990, 12.316877, 0.609822), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.501873, 13.454230, 3.422555), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.134656, 11.663800, 1.430365), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.463497, 10.385870, -0.107976), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.489743, 10.760847, 0.436931), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.628346, 1.302014, 0.921383), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.902989, 11.302076, -1.349709), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.304645, 11.560458, -1.794168), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.762091, 11.618122, 0.353706), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.902988, 11.302076, 1.339607), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.924314, 8.907180, 0.424113), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.813340, 8.802794, 0.251945), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.035472, 8.298563, 0.733752), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.885691, 8.733791, 0.002205), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.699404, 8.443759, 0.297370), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.576076, 12.163499, 1.906660), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.593969, 7.771802, 0.383810), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.769504, 7.616188, 0.002926), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.248090, 8.851061, 0.517984), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.651959, 7.663809, 0.921181), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.082109, 8.224376, 0.631365), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.725635, 8.512209, 0.006156), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.082110, 8.224376, -0.630370), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.657866, 7.873840, -0.676499), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.486122, 8.340447, -0.001389), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.049442, 8.206944, -0.000201), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.016466, 8.101930, -0.464067), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.332711, 8.184624, 0.000017), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(0.502974, 7.897428, 0.488457), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(1.339732, 7.629375, 0.498691), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.336134, 8.099589, 0.515180), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.016649, 8.101930, 0.463454), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.897338, 7.734172, 0.960296), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.339916, 8.085355, -0.516020), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.896439, 7.734172, -0.960489), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.173475, 6.976335, -0.893882), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.505262, 5.528042, -0.650517), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.752705, 6.381752, -0.478510), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.579335, 5.451514, 0.000123), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.902467, 6.295661, -0.001170), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.105716, 4.975335, -0.382700), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.137434, 4.885201, 0.000123), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.610472, 4.569527, 0.000769), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.628314, 4.770833, -0.430653), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.837733, 4.858635, -0.920395), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.290478, 7.057115, 0.431335), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.454301, 6.892156, 0.001738), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.626229, 7.787321, -0.411152), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.328152, 7.057115, -0.473017), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.651244, 7.664019, -0.911985), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.176858, 3.833155, -0.767025), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.135784, 11.016874, 1.729656), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.385377, 4.484066, -0.873830), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.111622, 3.146107, -0.761209), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.988732, 2.662679, -0.783060), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.838592, 3.151417, -0.947232), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.834858, 2.520305, -0.951304), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.993341, 10.127581, -0.059585), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.388902, 10.485564, 0.571664), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.521223, 3.136326, -0.916186), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.590415, 2.419748, -0.909293), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.404619, 3.128038, -0.697623), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.601727, 2.768583, -0.524893), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.872865, 3.609770, -0.518430), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.814728, 10.414034, -0.514818), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.511333, 2.413367, -0.719820), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.664865, 12.074451, -1.115461), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.875484, 11.376979, 0.680670), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.664875, 2.065622, -0.654853), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.343520, 11.698310, 1.246338), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.535641, 1.779872, -0.770151), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.611705, 1.343158, -0.935919), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.851569, 1.782422, -0.964584), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.866520, 3.885239, -1.063303), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.953571, 4.753620, -1.349774), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.004031, 1.772431, -0.830724), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.909775, 1.312836, -1.053495), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.110539, 1.293912, -0.873507), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.942393, 0.983128, -1.013183), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.074140, 0.974622, -0.895602), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.593537, 11.953799, -2.212754), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.478326, 1.345568, -0.785670), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.739471, 0.989713, -0.946262), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.635478, 0.985678, -0.835789), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.257086, 0.083158, -1.151880), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.440026, 0.084774, -1.003518), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.945926, 0.182039, -1.098700), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.981141, 0.968456, -0.747628), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.142503, 10.839898, -0.650662), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.947599, 1.322130, -0.674160), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.968225, 0.191314, 1.083802), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.630614, 1.332180, -0.683388), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.300321, 11.873555, -2.250425), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.872434, 2.613454, -0.584337), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.962758, 4.514684, -0.405328), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.259545, 3.853355, 0.762641), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.426067, 3.846334, 0.506020), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.400470, 3.884174, 1.029812), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.866702, 3.885449, 1.059888), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.838591, 3.150780, 0.936158), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.529693, 3.136327, 0.906623), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.385377, 4.484074, 0.866748), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.176857, 3.833155, 0.766947), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.886527, 3.802336, 0.496108), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.097020, 3.145679, 0.759620), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.944353, 11.531237, -1.797986), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.929990, 0.298323, -0.887855), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.982163, 10.213471, 0.074598), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.866407, 2.743382, 0.585155), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.859137, 10.665434, -0.651293), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.667961, 4.736189, 0.430689), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.552408, 12.215256, 1.159229), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.425925, 3.061607, 0.695707), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.596904, 2.437356, 0.899406), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.558024, 2.186415, 0.751825), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.819494, 2.580982, 0.937722), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.848677, 1.781994, 0.953406), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.767888, 9.959864, -0.485191), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.972316, 2.706066, 0.776008), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.662279, 10.286166, 0.154025), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.041574, 11.757336, -2.359421), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.290030, 11.507524, 1.648212), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.935586, 11.901523, 2.769537), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.616776, 2.763971, 0.535670), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.678871, 1.929065, 0.675191), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.870197, 11.224964, -0.643568), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.153509, 10.584853, 0.298236), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.509215, 11.834743, -1.090252), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.917346, 4.487899, -0.000096), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.024038, 4.492781, 0.406760), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.127294, 4.161394, 0.627732), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.991931, 11.777308, -2.272744), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.074389, 4.043114, -0.955503), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.659388, 3.289810, -0.967818), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.413203, 2.742840, -0.948631), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.255510, 1.895087, -0.927724), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.310476, 1.351951, -0.912852), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.139979, 1.325792, -1.057862), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.162695, 1.887428, -1.060074), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.864434, 1.295186, -1.103939), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.957791, 1.874887, -1.066754), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.756653, 0.152408, -1.036278), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.858488, 1.873613, -0.926754), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.293176, 2.732431, -0.825870), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.957067, 1.882328, -0.787183), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.158730, 1.897847, -0.807871), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.862636, 1.310068, -0.727370), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.118473, 1.300523, -0.764863), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.038345, 2.696931, -0.800440), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.894354, 2.673115, -0.947015), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.010050, 3.128676, -1.192528), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.039428, 2.684390, -1.093914), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.688817, 0.943990, -0.902653), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.809827, 0.957400, -0.772415), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.851527, 11.375952, -1.011978), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.285347, 11.610688, -1.564796), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.811993, 0.950816, -1.041210), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.596957, 11.825118, 1.089585), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.346168, 10.101863, 0.495785), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.865661, 11.288764, -1.214018), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.299123, 2.723287, -1.090246), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.439332, 3.230923, -1.156426), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.013840, 3.687749, -1.171517), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.738102, 4.034679, -1.227129), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.035281, 3.683924, 1.157854), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.055896, 4.021141, 0.957015), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.424557, 3.227526, 1.139960), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.628386, 3.281095, 0.967840), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.197924, 11.721874, 1.100748), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.776284, 3.162361, 0.962992), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.623298, 3.579547, 0.775355), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.024827, 3.155880, 0.775355), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.897595, 2.673116, 0.946933), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.007668, 2.334254, 0.803630), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.858488, 1.873613, 0.926673), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.041641, 2.541437, 1.078012), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.034381, 3.134205, 1.172831), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.389425, 0.108321, 0.996172), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.041573, 11.757336, 2.349318), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.707894, 0.956526, 0.905535), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.846819, 1.092480, 1.064037), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.841229, 11.895025, 0.596108), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.407559, 12.958398, -2.517178), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.251959, 2.523297, 1.076437), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.576077, 12.163504, -1.916765), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.221151, 2.452649, 0.826189), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.255511, 1.895087, 0.927642), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.502256, 12.957940, 2.530792), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.706656, 10.589504, -0.202886), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.151465, 13.522407, 3.459041), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.416811, 2.742841, 0.948549), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.268840, 1.366498, 0.916547), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.141177, 1.330249, 1.048318), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.404553, 12.228229, -1.994124), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.651101, 10.371837, -0.139013), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.140998, 1.355696, 0.783716), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.819554, 12.035024, -3.181720), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.646492, 11.221688, 0.827639), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.801054, 11.253448, 0.643568), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.477189, 0.085614, 0.737403), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.191541, 10.162235, 0.367636), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.843223, 1.082815, 0.757967), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.407440, 3.240704, 0.806610), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.001222, 3.697531, 0.772123), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.894579, 11.776375, 2.746290), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.479815, 11.060431, -0.456577), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.895478, 9.159722, -0.576478), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.924315, 8.907180, -0.424296), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.913582, 11.013324, -0.611835), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.327889, 11.769235, -1.017663), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.228461, 13.950845, -3.314293), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(3.477502, 0.078189, 1.029747), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.472327, 10.019597, -0.504265), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.572466, 12.584111, -2.092759), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.699404, 8.443759, -0.297553), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.626681, 11.288568, 0.348645), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.737238, 8.834003, -0.371551), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.868532, 10.504168, -0.151988), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.205896, 10.703399, 0.498846), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.916735, 7.229941, -0.271365), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(5.473074, 6.942109, -0.305966), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(5.472000, 7.065402, -0.000099), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(6.079699, 6.763544, -0.184070), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(6.086188, 6.568186, -0.167364), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(6.354712, 6.603467, -0.000099), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(6.241714, 6.809462, -0.000099), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(6.086188, 6.568186, 0.167279), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(5.432710, 6.593057, 0.319889), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(5.473074, 6.942109, 0.305776), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(6.079699, 6.763544, 0.183985), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(6.049422, 6.407051, -0.000099), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(5.393236, 6.426823, -0.001496), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(5.432710, 6.593057, -0.320402), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.547832, 10.050416, 0.506457), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.457559, 12.396005, 1.036995), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.377535, 9.941369, 0.362850), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.096886, 4.975335, 0.377443), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.479017, 11.760564, 1.028172), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.017527, 12.586747, 3.030172), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.118683, 10.964337, 1.328167), XMFLOAT4((const float*)&Colors::White)},
		{ XMFLOAT3(-4.024701, 10.117590, -0.168111), XMFLOAT4((const float*)&Colors::White) },
		{XMFLOAT3(-1.282203, 0.086783, 0.829704), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.622957, 12.216722, -1.123973), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.143584, 11.364805, 1.415457), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.443174, 11.378274, 0.865433), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.346268, 11.008546, 0.983638), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.291372, 13.894386, -3.417678), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.902973, 10.446601, 0.300706), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.477540, 12.502579, -2.376259), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.407557, 12.958382, 2.507071), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.017539, 12.586729, -3.040256), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.559362, 13.425319, 3.536629), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.711226, 11.934150, 0.996825), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.644184, 11.049927, -0.921372), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.065403, 10.996014, -1.215687), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.547581, 11.415363, -0.770000), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.851525, 11.375951, 1.001876), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.384079, 11.704647, -2.051955), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.035663, 11.464888, 1.730991), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.895135, 12.807475, 1.904066), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.417961, 12.111238, -2.123218), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.528409, 11.777360, -0.996484), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-1.007642, 0.171833, 0.788530), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.902705, 10.445900, -0.312004), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.073678, 11.659199, -2.379388), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.903425, 11.257533, -0.863853), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.293805, 10.660469, 1.494842), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-4.025333, 12.568804, 1.143337), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.686383, 10.406270, -0.610159), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.646494, 11.221689, -0.837736), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.994556, 11.346246, 1.766793), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.953880, 10.619737, 0.340608), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.768965, 11.971825, -3.015342), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.726369, 11.983154, -3.166139), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.701139, 10.653678, -0.584319), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.964052, 11.715513, -1.643646), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.670488, 1.290895, 0.714712), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.518035, 1.346097, 0.789046), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-2.799545, 11.472829, 0.498830), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(4.120523, 0.989294, -0.904878), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-0.913461, 1.183777, 1.028293), XMFLOAT4((const float*)&Colors::White)},
		{XMFLOAT3(-3.678212, 10.672935, 0.287497), XMFLOAT4((const float*)&Colors::White)}
	};

	///버텍스 버퍼를 만들기

	D3D11_BUFFER_DESC vbd;
	vbd.Usage = D3D11_USAGE_IMMUTABLE;
	vbd.ByteWidth = sizeof(Vertex) * 797;
	vbd.BindFlags = D3D11_BIND_VERTEX_BUFFER;
	vbd.CPUAccessFlags = 0;
	vbd.MiscFlags = 0;
	vbd.StructureByteStride = 0;
	D3D11_SUBRESOURCE_DATA vinitData;
	vinitData.pSysMem = vertices;
	m_d3dDevice->CreateBuffer(&vbd, &vinitData, &m_VertexBuffer);



	//인덱스 버퍼
	UINT indices[] =
	{
		529, 60, 536,
44, 84, 83,
491, 741, 365,
529, 527, 528,
512, 539, 377,
750, 176, 738,
750, 738, 672,
502, 508, 424,
4, 429, 318,
441, 475, 756,
659, 661, 662,
197, 556, 732,
38, 37, 40,
379, 375, 378,
722, 713, 721,
219, 178, 754,
172, 357, 164,
554, 599, 326,
88, 87, 84,
748, 541, 760,
137, 563, 138,
107, 518, 105,
54, 55, 52,
662, 665, 659,
217, 418, 335,
526, 528, 527,
52, 59, 54,
688, 194, 448,
191, 744, 326,
756, 481, 541,
497, 320, 312,
72, 655, 693,
297, 695, 247,
408, 420, 446,
512, 511, 513,
66, 78, 68,
248, 615, 243,
172, 218, 196,
86, 87, 113,
276, 463, 430,
104, 102, 103,
66, 67, 78,
104, 103, 106,
666, 656, 80,
748, 452, 733,
314, 448, 195,
4, 318, 470,
268, 648, 723,
428, 205, 289,
733, 452, 735,
646, 629, 627,
116, 115, 653,
362, 432, 734,
703, 142, 176,
16, 22, 101,
597, 737, 324,
561, 571, 572,
646, 465, 642,
662, 664, 665,
48, 47, 40,
7, 5, 66,
90, 89, 91,
764, 266, 466,
143, 150, 140,
698, 374, 190,
639, 632, 638,
632, 642, 634,
508, 502, 510,
467, 338, 725,
133, 132, 46,
674, 645, 230,
381, 425, 383,
48, 61, 585,
582, 179, 188,
660, 659, 620,
563, 137, 545,
619, 600, 618,
520, 518, 517,
13, 9, 24,
64, 36, 518,
92, 103, 102,
467, 725, 484,
410, 741, 464,
624, 650, 623,
690, 548, 648,
444, 408, 446,
490, 19, 253,
18, 21, 16,
747, 263, 595,
304, 204, 267,
657, 680, 692,
532, 618, 600,
668, 302, 612,
19, 360, 250,
20, 14, 18,
456, 469, 462,
62, 61, 53,
573, 572, 571,
85, 83, 84,
528, 54, 529,
675, 692, 680,
104, 105, 102,
683, 174, 703,
56, 65, 57,
545, 549, 546,
291, 387, 405,
325, 393, 236,
89, 110, 92,
302, 365, 415,
405, 617, 197,
535, 509, 506,
323, 492, 249,
443, 743, 764,
393, 595, 219,
60, 529, 54,
618, 584, 49,
337, 323, 249,
616, 761, 227,
526, 530, 528,
510, 509, 58,
116, 653, 141,
403, 449, 430,
513, 516, 130,
167, 415, 445,
575, 569, 574,
344, 642, 465,
548, 723, 648,
139, 243, 615,
69, 70, 76,
133, 134, 132,
359, 576, 573,
298, 189, 300,
536, 507, 538,
67, 66, 5,
406, 249, 203,
15, 13, 23,
322, 329, 317,
258, 751, 759,
290, 322, 316,
715, 711, 719,
267, 428, 304,
595, 325, 747,
739, 217, 677,
572, 573, 576,
447, 736, 228,
684, 477, 493,
294, 322, 290,
322, 294, 329,
188, 179, 276,
377, 378, 375,
402, 215, 230,
378, 377, 539,
261, 616, 705,
287, 317, 280,
670, 682, 665,
74, 2, 0,
70, 69, 82,
358, 154, 234,
476, 263, 765,
259, 173, 271,
304, 289, 204,
515, 516, 514,
611, 336, 164,
549, 137, 551,
278, 329, 422,
384, 379, 386,
606, 414, 770,
442, 401, 221,
7, 24, 9,
558, 581, 560,
31, 28, 94,
285, 176, 142,
253, 647, 360,
463, 447, 403,
587, 588, 590,
22, 16, 21,
623, 651, 622,
50, 39, 56,
727, 360, 647,
535, 536, 60,
746, 314, 235,
586, 47, 585,
116, 113, 114,
31, 27, 28,
269, 476, 206,
135, 551, 137,
457, 475, 441,
457, 459, 475,
471, 475, 459,
471, 459, 473,
433, 473, 459,
433, 472, 473,
323, 225, 238,
523, 517, 106,
528, 531, 54,
3, 0, 2,
529, 536, 527,
578, 190, 367,
640, 641, 145,
471, 481, 475,
481, 471, 473,
756, 475, 481,
622, 146, 623,
473, 480, 481,
82, 654, 655,
412, 413, 411,
473, 472, 480,
525, 527, 539,
521, 520, 515,
478, 480, 472,
195, 448, 194,
22, 112, 111,
400, 398, 399,
398, 400, 450,
457, 450, 400,
441, 450, 457,
103, 92, 110,
42, 43, 41,
102, 108, 95,
666, 659, 665,
450, 735, 398,
399, 398, 455,
455, 472, 399,
472, 455, 478,
452, 398, 735,
452, 455, 398,
189, 309, 439,
219, 364, 157,
198, 443, 470,
447, 435, 409,
343, 754, 397,
436, 176, 312,
721, 717, 18,
261, 737, 616,
610, 754, 343,
452, 748, 455,
632, 630, 642,
538, 539, 527,
455, 748, 478,
495, 580, 767,
107, 517, 518,
644, 461, 429,
541, 481, 480,
760, 478, 748,
478, 760, 480,
348, 737, 597,
204, 205, 267,
479, 248, 73,
480, 760, 541,
447, 201, 228,
656, 673, 657,
554, 758, 175,
97, 108, 99,
477, 684, 261,
110, 119, 126,
233, 265, 259,
281, 489, 599,
762, 313, 299,
271, 233, 259,
672, 285, 211,
393, 219, 610,
89, 88, 110,
128, 564, 534,
542, 534, 564,
580, 495, 77,
265, 233, 239,
18, 17, 721,
237, 239, 233,
92, 91, 89,
592, 591, 593,
62, 591, 588,
649, 157, 364,
619, 593, 591,
240, 237, 233,
762, 366, 222,
430, 178, 276,
190, 309, 189,
136, 132, 135,
146, 622, 151,
488, 749, 505,
501, 240, 503,
240, 501, 237,
23, 25, 15,
94, 101, 91,
766, 614, 767,
500, 237, 501,
500, 501, 423,
128, 124, 564,
237, 500, 485,
164, 451, 282,
239, 237, 485,
500, 423, 485,
315, 454, 258,
427, 485, 423,
239, 485, 216,
698, 248, 374,
214, 301, 212,
484, 216, 485,
668, 368, 272,
389, 668, 272,
482, 484, 485,
482, 485, 427,
729, 438, 756,
204, 274, 612,
484, 486, 216,
321, 139, 615,
321, 615, 759,
231, 487, 442,
515, 514, 521,
482, 467, 484,
631, 627, 596,
39, 50, 40,
522, 65, 521,
106, 109, 523,
683, 703, 436,
584, 533, 542,
609, 159, 678,
537, 507, 704,
102, 95, 92,
686, 763, 397,
462, 279, 456,
223, 682, 701,
235, 214, 212,
449, 483, 610,
761, 407, 705,
181, 318, 461,
338, 467, 482,
565, 544, 562,
579, 583, 565,
277, 300, 189,
427, 426, 482,
426, 427, 425,
458, 338, 482,
482, 426, 458,
404, 19, 250,
591, 55, 619,
458, 353, 338,
243, 139, 755,
458, 426, 459,
458, 459, 353,
433, 459, 426,
457, 353, 459,
457, 400, 353,
426, 380, 433,
426, 425, 380,
472, 433, 380,
381, 380, 425,
382, 371, 381,
380, 381, 371,
371, 396, 380,
380, 396, 472,
123, 120, 132,
399, 472, 396,
396, 354, 399,
400, 399, 354,
29, 26, 20,
354, 353, 400,
746, 492, 323,
97, 96, 95,
131, 332, 126,
709, 710, 17,
352, 338, 353,
353, 354, 352,
505, 249, 492,
338, 352, 725,
654, 80, 656,
176, 750, 312,
107, 105, 106,
226, 483, 582,
534, 542, 533,
352, 350, 725,
350, 352, 354,
349, 725, 350,
513, 514, 516,
698, 190, 759,
361, 469, 348,
345, 350, 354,
345, 354, 396,
356, 349, 350,
345, 396, 341,
350, 345, 346,
341, 346, 345,
356, 350, 346,
14, 15, 18,
53, 55, 62,
224, 30, 306,
172, 196, 368,
103, 110, 109,
577, 342, 257,
725, 486, 484,
486, 725, 349,
10, 9, 12,
499, 182, 279,
200, 349, 356,
137, 138, 136,
417, 734, 225,
29, 718, 28,
705, 407, 261,
244, 439, 309,
200, 486, 349,
681, 682, 264,
168, 474, 431,
541, 729, 756,
686, 397, 299,
216, 158, 239,
260, 282, 167,
193, 216, 486,
223, 264, 682,
158, 216, 193,
681, 264, 685,
213, 193, 486,
479, 165, 292,
213, 486, 200,
122, 126, 125,
567, 566, 569,
451, 302, 415,
461, 644, 198,
162, 158, 193,
691, 689, 669,
707, 753, 355,
193, 213, 192,
524, 130, 516,
155, 115, 1,
200, 192, 213,
61, 48, 51,
581, 579, 257,
30, 331, 156,
162, 193, 192,
586, 585, 613,
199, 275, 319,
542, 564, 540,
162, 192, 185,
162, 185, 163,
577, 257, 579,
748, 733, 729,
670, 665, 669,
34, 519, 33,
236, 570, 621,
285, 738, 176,
45, 46, 118,
366, 610, 343,
127, 448, 314,
192, 183, 185,
131, 130, 332,
99, 34, 32,
434, 387, 229,
192, 200, 183,
383, 508, 376,
27, 12, 26,
90, 87, 89,
210, 183, 200,
210, 200, 356,
461, 318, 429,
765, 402, 476,
273, 488, 611,
415, 167, 451,
649, 364, 743,
344, 246, 642,
143, 140, 141,
185, 183, 163,
491, 293, 410,
113, 111, 112,
603, 590, 605,
141, 153, 143,
163, 183, 187,
125, 126, 119,
121, 131, 122,
212, 417, 172,
504, 501, 503,
753, 297, 247,
57, 52, 56,
183, 210, 187,
631, 465, 627,
187, 210, 171,
578, 395, 460,
170, 163, 187,
170, 187, 171,
510, 58, 511,
171, 173, 170,
770, 413, 77,
731, 667, 412,
208, 210, 356,
198, 181, 461,
628, 625, 627,
125, 120, 122,
639, 638, 145,
356, 346, 208,
677, 217, 335,
209, 210, 208,
209, 208, 444,
210, 209, 171,
578, 755, 395,
134, 133, 553,
444, 208, 408,
346, 408, 208,
403, 740, 449,
255, 466, 266,
584, 553, 133,
299, 397, 430,
346, 341, 408,
694, 274, 289,
562, 546, 561,
515, 517, 516,
397, 762, 222,
51, 40, 50,
340, 420, 408,
340, 408, 341,
86, 113, 141,
438, 437, 756,
179, 435, 463,
341, 391, 340,
555, 560, 550,
524, 516, 332,
390, 340, 391,
341, 370, 391,
370, 341, 396,
308, 391, 370,
396, 371, 370,
340, 390, 339,
339, 420, 340,
737, 348, 469,
372, 370, 371,
370, 372, 308,
371, 382, 372,
373, 372, 382,
394, 308, 372,
373, 384, 372,
372, 385, 394,
385, 372, 384,
328, 394, 385,
328, 385, 339,
53, 51, 52,
384, 386, 385,
339, 385, 388,
339, 388, 420,
589, 590, 588,
144, 153, 145,
33, 32, 34,
388, 385, 386,
35, 63, 37,
236, 765, 747,
420, 388, 446,
14, 26, 12,
417, 225, 218,
34, 99, 108,
600, 726, 532,
30, 224, 335,
504, 424, 501,
446, 388, 696,
386, 696, 388,
608, 594, 598,
446, 696, 209,
430, 463, 403,
365, 302, 389,
716, 714, 719,
709, 100, 28,
416, 232, 199,
156, 749, 30,
444, 446, 209,
405, 197, 395,
49, 43, 47,
272, 368, 221,
487, 221, 368,
154, 309, 374,
504, 503, 506,
171, 209, 696,
252, 456, 182,
503, 704, 507,
706, 704, 503,
432, 238, 225,
720, 714, 716,
734, 417, 212,
171, 254, 173,
696, 697, 171,
696, 386, 697,
706, 697, 386,
431, 768, 498,
254, 171, 697,
401, 196, 218,
262, 697, 706,
706, 503, 262,
179, 740, 409,
503, 240, 262,
57, 522, 58,
3, 44, 0,
254, 697, 262,
262, 240, 254,
76, 74, 25,
152, 685, 264,
255, 81, 745,
240, 233, 254,
271, 254, 233,
718, 719, 711,
526, 129, 534,
629, 642, 630,
271, 173, 254,
405, 395, 755,
139, 321, 256,
445, 415, 741,
266, 81, 255,
15, 14, 13,
604, 767, 614,
558, 579, 581,
107, 106, 517,
164, 336, 172,
156, 203, 249,
359, 573, 75,
578, 234, 755,
656, 657, 654,
48, 585, 47,
39, 40, 37,
438, 729, 735,
320, 649, 645,
11, 35, 8,
120, 118, 46,
739, 677, 363,
180, 173, 259,
572, 568, 561,
55, 54, 600,
260, 406, 282,
573, 571, 257,
546, 562, 544,
524, 332, 130,
164, 357, 289,
109, 126, 332,
740, 179, 582,
411, 414, 598,
422, 390, 311,
579, 558, 583,
293, 491, 365,
390, 391, 311,
307, 311, 391,
234, 154, 292,
391, 308, 307,
533, 532, 530,
311, 307, 280,
670, 701, 682,
406, 203, 273,
305, 280, 307,
307, 308, 305,
20, 18, 717,
389, 272, 260,
215, 765, 226,
286, 305, 308,
308, 394, 286,
64, 63, 36,
88, 89, 87,
644, 645, 649,
288, 286, 394,
282, 451, 167,
414, 411, 413,
305, 287, 280,
305, 286, 287,
357, 172, 668,
722, 710, 713,
552, 558, 555,
13, 12, 9,
316, 287, 286,
50, 56, 52,
286, 288, 316,
543, 553, 540,
435, 447, 463,
626, 637, 769,
288, 290, 316,
431, 768, 168,
83, 140, 150,
325, 595, 393,
290, 288, 295,
242, 182, 499,
418, 739, 331,
295, 294, 290,
176, 283, 703,
263, 269, 219,
577, 579, 569,
298, 281, 364,
133, 49, 584,
742, 19, 404,
369, 701, 669,
295, 288, 328,
295, 328, 294,
394, 328, 288,
699, 318, 181,
294, 327, 329,
327, 294, 328,
334, 329, 327,
362, 734, 212,
4, 745, 429,
331, 739, 156,
644, 230, 645,
339, 327, 328,
339, 390, 327,
334, 327, 390,
422, 334, 390,
588, 587, 62,
603, 495, 604,
42, 40, 47,
291, 139, 229,
611, 164, 273,
180, 177, 173,
702, 453, 284,
711, 715, 710,
101, 111, 90,
170, 173, 177,
374, 479, 292,
177, 162, 170,
163, 170, 162,
126, 109, 110,
97, 95, 108,
365, 389, 728,
650, 641, 651,
704, 379, 537,
605, 608, 606,
177, 180, 239,
239, 158, 177,
517, 515, 520,
126, 122, 131,
548, 690, 275,
158, 162, 177,
644, 402, 230,
114, 112, 1,
488, 273, 203,
624, 633, 625,
33, 11, 32,
763, 313, 762,
166, 596, 637,
224, 488, 203,
83, 0, 44,
635, 625, 633,
21, 18, 15,
645, 674, 320,
553, 584, 540,
20, 717, 29,
625, 635, 626,
437, 450, 441,
549, 551, 550,
206, 745, 367,
483, 226, 765,
11, 33, 35,
627, 629, 628,
274, 694, 612,
366, 762, 299,
664, 669, 665,
673, 682, 676,
21, 15, 25,
38, 40, 41,
468, 462, 361,
111, 113, 87,
546, 544, 545,
25, 1, 112,
69, 76, 23,
437, 438, 450,
558, 552, 583,
693, 655, 692,
211, 330, 672,
709, 28, 710,
612, 694, 668,
154, 374, 292,
466, 255, 470,
6, 2, 5,
302, 668, 389,
711, 710, 28,
239, 180, 265,
414, 606, 608,
116, 141, 113,
494, 432, 362,
259, 265, 180,
301, 242, 462,
128, 129, 124,
742, 647, 253,
610, 366, 430,
769, 637, 596,
537, 378, 538,
699, 470, 318,
753, 554, 730,
378, 537, 379,
624, 625, 650,
538, 527, 536,
96, 97, 98,
57, 58, 52,
767, 117, 766,
477, 241, 232,
255, 745, 4,
248, 698, 615,
477, 761, 771,
218, 337, 401,
315, 197, 454,
241, 477, 771,
568, 574, 569,
117, 767, 580,
71, 76, 70,
491, 741, 679,
95, 93, 91,
93, 95, 96,
555, 550, 551,
463, 276, 179,
109, 106, 103,
691, 669, 663,
194, 494, 771,
469, 456, 252,
767, 604, 495,
114, 115, 116,
488, 505, 611,
409, 736, 447,
155, 151, 115,
0, 25, 74,
657, 692, 655,
320, 157, 649,
203, 363, 224,
610, 483, 393,
771, 761, 194,
540, 563, 543,
761, 737, 194,
10, 11, 9,
373, 375, 384,
141, 140, 86,
667, 77, 413,
226, 750, 215,
194, 737, 469,
606, 495, 605,
686, 299, 313,
664, 663, 669,
253, 19, 742,
182, 456, 279,
285, 142, 211,
343, 397, 222,
770, 77, 495,
588, 592, 589,
592, 588, 591,
105, 519, 108,
67, 74, 79,
147, 144, 148,
145, 148, 144,
59, 509, 60,
683, 674, 215,
194, 252, 195,
30, 418, 331,
677, 224, 363,
252, 194, 469,
23, 24, 69,
38, 41, 6,
289, 274, 204,
128, 534, 129,
732, 556, 454,
392, 403, 228,
427, 423, 425,
60, 54, 59,
186, 410, 464,
14, 20, 26,
198, 699, 181,
261, 324, 737,
462, 548, 301,
17, 18, 16,
641, 630, 639,
228, 201, 447,
86, 84, 87,
174, 683, 672,
362, 548, 275,
470, 255, 4,
582, 449, 740,
435, 179, 409,
222, 366, 343,
639, 145, 641,
387, 751, 617,
37, 38, 8,
612, 205, 204,
309, 154, 678,
45, 44, 3,
428, 289, 304,
678, 358, 247,
5, 74, 67,
178, 188, 276,
332, 523, 109,
632, 639, 630,
153, 652, 640,
518, 520, 64,
154, 358, 678,
678, 707, 609,
96, 31, 93,
94, 93, 31,
120, 46, 132,
651, 623, 650,
379, 384, 375,
431, 671, 768,
266, 358, 81,
574, 568, 576,
703, 283, 436,
58, 521, 514,
231, 221, 487,
49, 133, 43,
392, 740, 403,
594, 589, 592,
592, 593, 594,
300, 284, 298,
387, 434, 256,
143, 153, 144,
100, 94, 28,
147, 150, 144,
383, 424, 508,
26, 28, 27,
764, 599, 266,
238, 746, 323,
599, 554, 266,
600, 619, 55,
358, 266, 247,
334, 422, 329,
247, 266, 753,
335, 418, 30,
616, 227, 705,
114, 1, 115,
266, 554, 753,
688, 432, 494,
502, 424, 506,
622, 653, 115,
44, 45, 84,
672, 738, 285,
24, 7, 68,
589, 605, 590,
68, 69, 24,
567, 569, 579,
470, 443, 466,
489, 496, 191,
376, 508, 511,
165, 243, 292,
6, 7, 8,
423, 501, 424,
504, 506, 424,
608, 598, 414,
129, 525, 130,
424, 425, 423,
758, 281, 298,
746, 251, 492,
134, 553, 552,
228, 736, 700,
523, 516, 517,
123, 122, 120,
367, 189, 298,
689, 701, 369,
689, 152, 701,
223, 701, 152,
152, 264, 223,
246, 344, 465,
465, 631, 246,
166, 246, 631,
596, 166, 631,
1, 83, 155,
150, 155, 83,
155, 150, 151,
312, 320, 674,
151, 150, 146,
147, 146, 150,
147, 148, 146,
149, 146, 148,
149, 148, 633,
638, 633, 148,
638, 634, 633,
635, 633, 634,
634, 636, 635,
637, 635, 636,
415, 365, 741,
643, 637, 636,
637, 643, 166,
246, 166, 643,
243, 165, 248,
86, 85, 84,
76, 71, 74,
620, 74, 71,
71, 72, 620,
250, 360, 727,
72, 693, 620,
660, 620, 693,
693, 692, 660,
661, 660, 692,
692, 675, 661,
663, 661, 675,
628, 650, 625,
249, 406, 337,
675, 685, 663,
691, 663, 685,
570, 236, 747,
226, 497, 750,
691, 685, 689,
152, 689, 685,
548, 212, 301,
368, 668, 172,
716, 717, 720,
46, 43, 133,
681, 685, 676,
523, 332, 516,
70, 82, 655,
491, 186, 464,
712, 710, 715,
512, 513, 539,
131, 121, 130,
79, 78, 67,
136, 124, 123,
279, 462, 242,
156, 249, 505,
153, 141, 653,
513, 130, 525,
553, 543, 583,
709, 17, 100,
536, 535, 507,
752, 731, 766,
412, 766, 731,
176, 436, 283,
367, 81, 578,
766, 412, 614,
411, 614, 412,
460, 759, 190,
598, 614, 411,
547, 753, 730,
613, 614, 598,
591, 62, 55,
439, 277, 189,
613, 598, 586,
593, 586, 598,
586, 593, 47,
619, 47, 593,
117, 580, 752,
580, 77, 752,
731, 752, 77,
667, 731, 77,
575, 574, 342,
342, 574, 75,
576, 75, 574,
359, 75, 576,
81, 367, 745,
275, 199, 232,
119, 118, 125,
253, 360, 490,
123, 132, 136,
9, 8, 7,
281, 599, 764,
663, 662, 661,
477, 261, 407,
316, 322, 317,
589, 594, 605,
65, 64, 520,
108, 102, 105,
291, 405, 755,
6, 8, 38,
568, 569, 566,
42, 41, 40,
575, 342, 569,
112, 114, 113,
551, 135, 552,
607, 758, 453,
758, 298, 453,
506, 507, 535,
387, 291, 229,
680, 673, 676,
759, 751, 321,
683, 215, 750,
598, 594, 593,
724, 601, 347,
325, 570, 747,
526, 534, 530,
715, 719, 714,
312, 674, 436,
101, 94, 16,
634, 638, 632,
652, 153, 653,
272, 337, 406,
694, 289, 357,
263, 747, 765,
630, 641, 628,
99, 32, 98,
512, 377, 511,
637, 626, 635,
646, 627, 465,
27, 98, 32,
718, 717, 719,
655, 72, 70,
721, 720, 717,
63, 64, 56,
142, 703, 330,
25, 0, 1,
358, 234, 81,
741, 491, 464,
601, 724, 347,
599, 191, 326,
521, 58, 522,
680, 676, 675,
539, 538, 378,
522, 57, 65,
118, 84, 45,
440, 678, 247,
490, 360, 19,
96, 98, 31,
681, 676, 682,
27, 31, 98,
39, 37, 63,
443, 764, 466,
258, 454, 556,
601, 310, 303,
601, 347, 270,
270, 310, 601,
121, 124, 129,
715, 714, 712,
497, 226, 188,
582, 188, 226,
751, 256, 321,
493, 232, 416,
36, 33, 519,
527, 525, 526,
25, 23, 76,
716, 719, 717,
99, 98, 97,
430, 397, 178,
652, 622, 651,
135, 132, 134,
759, 615, 698,
75, 257, 342,
644, 649, 443,
270, 647, 310,
310, 559, 303,
712, 713, 710,
159, 244, 309,
722, 721, 17,
24, 23, 13,
301, 214, 195,
624, 623, 633,
617, 751, 258,
751, 387, 256,
207, 310, 647,
429, 402, 644,
207, 647, 742,
742, 404, 207,
191, 599, 489,
571, 561, 560,
460, 395, 315,
219, 595, 263,
297, 421, 695,
251, 611, 505,
728, 260, 167,
557, 207, 404,
497, 188, 178,
260, 728, 389,
207, 557, 351,
581, 257, 571,
714, 720, 713,
520, 521, 65,
502, 506, 509,
160, 310, 207,
507, 506, 503,
34, 108, 519,
3, 41, 43,
160, 333, 310,
629, 646, 642,
746, 235, 251,
333, 559, 310,
320, 178, 157,
449, 582, 483,
84, 118, 88,
320, 497, 178,
257, 75, 573,
59, 58, 509,
665, 673, 666,
161, 333, 687,
333, 161, 559,
194, 688, 494,
699, 198, 470,
36, 35, 33,
603, 605, 495,
445, 410, 167,
431, 498, 768,
50, 52, 51,
382, 376, 373,
487, 368, 196,
313, 763, 686,
205, 302, 289,
559, 161, 202,
367, 364, 206,
364, 219, 269,
202, 347, 559,
479, 374, 248,
559, 347, 303,
700, 409, 228,
431, 474, 671,
81, 234, 578,
601, 303, 347,
298, 284, 453,
533, 584, 532,
547, 355, 753,
531, 530, 532,
660, 661, 659,
674, 683, 436,
621, 570, 325,
270, 347, 202,
424, 383, 425,
707, 421, 297,
673, 665, 682,
675, 676, 685,
202, 727, 270,
161, 727, 202,
647, 270, 727,
551, 552, 555,
509, 510, 502,
309, 678, 159,
317, 287, 316,
687, 727, 161,
430, 449, 610,
687, 250, 727,
735, 450, 438,
234, 292, 243,
129, 130, 121,
250, 687, 296,
250, 296, 404,
104, 106, 105,
505, 492, 251,
404, 296, 557,
618, 49, 619,
175, 730, 554,
750, 672, 683,
510, 511, 508,
626, 769, 627,
479, 248, 165,
668, 694, 357,
47, 619, 49,
687, 245, 296,
531, 528, 530,
583, 552, 553,
563, 540, 564,
548, 362, 212,
722, 17, 710,
407, 761, 477,
65, 56, 64,
705, 227, 761,
143, 144, 150,
245, 687, 708,
479, 73, 248,
333, 708, 687,
245, 168, 768,
136, 138, 124,
496, 489, 744,
7, 6, 5,
608, 605, 594,
531, 532, 726,
640, 145, 153,
241, 168, 232,
232, 168, 708,
32, 10, 27,
245, 708, 168,
587, 585, 61,
519, 105, 518,
319, 275, 690,
311, 280, 422,
763, 762, 397,
745, 206, 476,
432, 225, 734,
74, 5, 2,
745, 476, 429,
100, 16, 94,
66, 68, 7,
743, 443, 649,
330, 174, 672,
708, 333, 160,
572, 576, 568,
614, 613, 604,
190, 578, 460,
71, 70, 72,
337, 272, 221,
726, 600, 54,
366, 299, 430,
247, 421, 440,
160, 207, 351,
421, 247, 695,
557, 474, 351,
138, 564, 124,
428, 267, 205,
718, 29, 717,
737, 761, 616,
351, 474, 241,
765, 236, 483,
514, 511, 58,
2, 6, 41,
241, 474, 168,
537, 538, 507,
379, 704, 706,
590, 603, 602,
91, 92, 95,
726, 54, 531,
771, 351, 241,
771, 494, 351,
26, 29, 28,
494, 160, 351,
643, 642, 246,
59, 52, 58,
421, 707, 440,
362, 160, 494,
160, 362, 708,
301, 252, 242,
708, 362, 275,
182, 242, 252,
533, 530, 534,
723, 462, 468,
413, 412, 667,
525, 539, 513,
708, 275, 232,
607, 175, 758,
82, 80, 654,
186, 491, 410,
626, 627, 625,
40, 51, 48,
203, 156, 739,
224, 306, 749,
469, 361, 462,
564, 138, 563,
462, 723, 548,
53, 52, 55,
545, 543, 563,
752, 766, 117,
178, 397, 754,
149, 623, 146,
655, 654, 657,
656, 666, 673,
256, 434, 229,
651, 640, 652,
620, 79, 74,
677, 335, 224,
61, 62, 587,
612, 302, 205,
499, 279, 242,
621, 325, 236,
636, 634, 642,
355, 609, 707,
124, 121, 123,
119, 110, 88,
741, 410, 445,
622, 115, 151,
214, 235, 314,
134, 552, 135,
298, 364, 367,
630, 628, 629,
483, 236, 393,
87, 90, 111,
112, 22, 25,
376, 382, 383,
273, 164, 282,
544, 565, 583,
443, 198, 644,
402, 429, 476,
211, 142, 330,
111, 101, 22,
758, 326, 744,
10, 32, 11,
754, 610, 219,
119, 88, 118,
496, 744, 191,
611, 251, 235,
312, 750, 497,
149, 633, 623,
707, 297, 753,
671, 474, 557,
703, 174, 330,
643, 636, 642,
769, 596, 627,
41, 3, 2,
617, 405, 387,
337, 218, 225,
561, 550, 560,
12, 27, 10,
184, 658, 757,
184, 757, 419,
650, 628, 641,
377, 375, 376,
543, 545, 544,
746, 238, 658,
658, 184, 746,
83, 85, 140,
218, 172, 417,
16, 100, 17,
406, 260, 272,
680, 657, 673,
94, 91, 93,
314, 746, 184,
519, 518, 36,
618, 532, 584,
184, 127, 314,
35, 36, 63,
566, 561, 568,
90, 91, 101,
542, 540, 584,
535, 60, 509,
744, 489, 758,
602, 604, 613,
448, 127, 688,
221, 231, 442,
273, 282, 406,
136, 135, 137,
514, 513, 511,
337, 225, 323,
419, 127, 184,
196, 401, 487,
587, 590, 585,
749, 488, 224,
228, 403, 447,
127, 220, 688,
291, 755, 139,
688, 220, 432,
256, 229, 139,
375, 373, 376,
129, 526, 525,
550, 546, 549,
302, 164, 289,
220, 238, 432,
79, 620, 659,
659, 80, 79,
85, 86, 140,
220, 169, 238,
122, 123, 121,
658, 238, 169,
220, 127, 169,
602, 613, 585,
419, 169, 127,
700, 736, 409,
755, 234, 243,
278, 280, 317,
555, 558, 560,
3, 43, 45,
741, 491, 679,
203, 739, 363,
235, 212, 336,
221, 401, 337,
757, 658, 169,
314, 195, 214,
167, 410, 728,
674, 230, 215,
228, 409, 392,
301, 195, 252,
419, 757, 169,
571, 560, 581,
324, 261, 684,
487, 401, 442,
765, 215, 402,
293, 365, 728,
505, 749, 156,
232, 493, 477,
640, 651, 641,
602, 585, 590,
281, 764, 743,
768, 296, 245,
566, 567, 562,
148, 145, 638,
83, 1, 0,
550, 561, 546,
604, 602, 603,
281, 758, 489,
735, 729, 733,
413, 770, 414,
748, 729, 541,
12, 13, 14,
82, 68, 78,
460, 315, 258,
178, 219, 157,
666, 80, 659,
172, 336, 212,
269, 263, 476,
381, 383, 382,
293, 728, 410,
652, 653, 622,
309, 190, 374,
549, 545, 137,
577, 569, 342,
664, 662, 663,
441, 756, 437,
78, 80, 82,
21, 25, 22,
37, 8, 35,
217, 739, 418,
8, 9, 11,
743, 364, 281,
678, 440, 707,
278, 422, 280,
713, 712, 714,
78, 79, 80,
51, 53, 61,
720, 721, 713,
369, 669, 689,
120, 125, 118,
30, 749, 306,
770, 495, 606,
315, 395, 197,
197, 732, 454,
376, 511, 377,
557, 768, 671,
42, 47, 43,
68, 82, 69,
326, 758, 554,
392, 409, 740,
258, 759, 460,
544, 583, 543,
565, 562, 567,
670, 669, 701,
451, 164, 302,
617, 556, 197,
278, 317, 329,
768, 557, 296,
189, 367, 190,
711, 28, 718,
706, 386, 379,
63, 56, 39,
46, 45, 43,
567, 579, 565,
611, 235, 336,
206, 364, 269,
566, 562, 561,
617, 258, 556,
	};

	D3D11_BUFFER_DESC ibd;
	ibd.Usage = D3D11_USAGE_IMMUTABLE;
	ibd.ByteWidth = sizeof(UINT) * 4525;
	ibd.BindFlags = D3D11_BIND_INDEX_BUFFER;
	ibd.CPUAccessFlags = 0;
	ibd.MiscFlags = 0;
	ibd.StructureByteStride = 0;
	D3D11_SUBRESOURCE_DATA iinitData;
	iinitData.pSysMem = indices;
	m_d3dDevice->CreateBuffer(&ibd, &iinitData, &m_IndexBuffer);

}

void Deer::BuildFX()
{
	std::ifstream fin("../debug/color.cso", std::ios::binary);

	fin.seekg(0, std::ios_base::end);
	int size = (int)fin.tellg();
	fin.seekg(0, std::ios_base::beg);
	std::vector<char> compiledShader(size);

	fin.read(&compiledShader[0], size);
	fin.close();

	D3DX11CreateEffectFromMemory(&compiledShader[0], size, 0, m_d3dDevice, &m_FX);

	m_Technique = m_FX->GetTechniqueByName("ColorTech");
	m_fxWorldViewProjection = m_FX->GetVariableByName("gWorldViewProj")->AsMatrix();
}

void Deer::BuildFX_Compile()
{
	DWORD shaderFlags = 0;
#if defined(DEBUG) || defined(_DEBUG)
	shaderFlags |= D3D10_SHADER_DEBUG;
	shaderFlags |= D3D10_SHADER_SKIP_OPTIMIZATION;
#endif

	ID3D10Blob* compiledShader = 0;
	ID3D10Blob* compilationMsgs = 0;
	//HRESULT hr = D3DX11CompileFromFile(L"FX/color.fx", 0, 0, 0, "fx_5_0", shaderFlags, 0, 0, &compiledShader, &compilationMsgs, 0);
	HRESULT hr = D3DCompileFromFile(L"../FX/wire.fx", 0, 0, 0, "fx_5_0", shaderFlags, 0, &compiledShader, &compilationMsgs);

	// compilationMsgs can store errors or warnings.
	if (compilationMsgs != 0)
	{
		///MessageBoxA(0, (char*)compilationMsgs->GetBufferPointer(), 0, 0);
		ReleaseCOM(compilationMsgs);
	}

	D3DX11CreateEffectFromMemory(compiledShader->GetBufferPointer(), compiledShader->GetBufferSize(), 0, m_d3dDevice, &m_FX);

	ReleaseCOM(compiledShader);

	m_Technique = m_FX->GetTechniqueByName("ColorTech");
	m_fxWorldViewProjection = m_FX->GetVariableByName("gWorldViewProj")->AsMatrix();
}

void Deer::BuildVertexLayout()
{
	// Create the vertex input layout.
	D3D11_INPUT_ELEMENT_DESC vertexDesc[] =
	{
		{"POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 0, D3D11_INPUT_PER_VERTEX_DATA, 0},
		{"COLOR",    0, DXGI_FORMAT_R32G32B32A32_FLOAT, 0, 12, D3D11_INPUT_PER_VERTEX_DATA, 0}
	};

	//Create the input layout
	D3DX11_PASS_DESC passDesc;
	m_Technique->GetPassByIndex(0)->GetDesc(&passDesc);
	m_d3dDevice->CreateInputLayout(vertexDesc, 2, passDesc.pIAInputSignature, passDesc.IAInputSignatureSize, &m_InputLayout);

}
